// Code generated from C:/Users/Psydu/GolandProjects/go-zero/tools/goctl/api/parser/g4\ApiLexer.g4 by ANTLR 4.12.0. DO NOT EDIT.

package api

import (
	"fmt"
	"sync"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type ApiLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var apilexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func apilexerLexerInit() {
	staticData := &apilexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "'@doc'", "'@handler'", "'@desc'", "'interface{}'", "'@server'",
		"'@type'", "'<-'",
	}
	staticData.symbolicNames = []string{
		"", "ATDOC", "ATHANDLER", "ATDESC", "INTERFACE", "ATSERVER", "ATTYPE",
		"AS", "WS", "COMMENT", "LINE_COMMENT", "STRING", "RAW_STRING", "LINE_VALUE",
		"ID", "LetterOrDigit",
	}
	staticData.ruleNames = []string{
		"ATDOC", "ATHANDLER", "ATDESC", "INTERFACE", "ATSERVER", "ATTYPE", "AS",
		"WS", "COMMENT", "LINE_COMMENT", "STRING", "RAW_STRING", "LINE_VALUE",
		"ID", "LetterOrDigit", "ExponentPart", "EscapeSequence", "HexDigits",
		"HexDigit", "Digits", "Letter",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 15, 228, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1,
		3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1,
		4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1,
		6, 1, 6, 1, 7, 4, 7, 94, 8, 7, 11, 7, 12, 7, 95, 1, 7, 1, 7, 1, 8, 1, 8,
		1, 8, 1, 8, 5, 8, 104, 8, 8, 10, 8, 12, 8, 107, 9, 8, 1, 8, 1, 8, 1, 8,
		1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 5, 9, 118, 8, 9, 10, 9, 12, 9, 121,
		9, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 5, 10, 128, 8, 10, 10, 10, 12, 10,
		131, 9, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 4, 11, 138, 8, 11, 11, 11,
		12, 11, 139, 1, 11, 1, 11, 1, 12, 1, 12, 5, 12, 146, 8, 12, 10, 12, 12,
		12, 149, 9, 12, 1, 12, 1, 12, 5, 12, 153, 8, 12, 10, 12, 12, 12, 156, 9,
		12, 3, 12, 158, 8, 12, 1, 13, 1, 13, 5, 13, 162, 8, 13, 10, 13, 12, 13,
		165, 9, 13, 1, 14, 1, 14, 3, 14, 169, 8, 14, 1, 15, 1, 15, 3, 15, 173,
		8, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 181, 8, 16, 1,
		16, 3, 16, 184, 8, 16, 1, 16, 1, 16, 1, 16, 4, 16, 189, 8, 16, 11, 16,
		12, 16, 190, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 198, 8, 16, 1, 17,
		1, 17, 1, 17, 5, 17, 203, 8, 17, 10, 17, 12, 17, 206, 9, 17, 1, 17, 3,
		17, 209, 8, 17, 1, 18, 1, 18, 1, 19, 1, 19, 5, 19, 215, 8, 19, 10, 19,
		12, 19, 218, 9, 19, 1, 19, 3, 19, 221, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20,
		3, 20, 227, 8, 20, 1, 105, 0, 21, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6,
		13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31,
		0, 33, 0, 35, 0, 37, 0, 39, 0, 41, 0, 1, 0, 18, 3, 0, 9, 10, 12, 13, 32,
		32, 2, 0, 10, 10, 13, 13, 2, 0, 34, 34, 92, 92, 4, 0, 10, 10, 13, 13, 92,
		92, 96, 96, 2, 0, 9, 9, 32, 32, 4, 0, 10, 10, 13, 13, 34, 34, 96, 96, 1,
		0, 48, 57, 2, 0, 69, 69, 101, 101, 2, 0, 43, 43, 45, 45, 8, 0, 34, 34,
		39, 39, 92, 92, 98, 98, 102, 102, 110, 110, 114, 114, 116, 116, 1, 0, 48,
		51, 1, 0, 48, 55, 3, 0, 48, 57, 65, 70, 97, 102, 2, 0, 48, 57, 95, 95,
		4, 0, 36, 36, 65, 90, 95, 95, 97, 122, 2, 0, 0, 127, 55296, 56319, 1, 0,
		55296, 56319, 1, 0, 56320, 57343, 246, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0,
		0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0,
		0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0,
		0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1,
		0, 0, 0, 0, 29, 1, 0, 0, 0, 1, 43, 1, 0, 0, 0, 3, 48, 1, 0, 0, 0, 5, 57,
		1, 0, 0, 0, 7, 63, 1, 0, 0, 0, 9, 75, 1, 0, 0, 0, 11, 83, 1, 0, 0, 0, 13,
		89, 1, 0, 0, 0, 15, 93, 1, 0, 0, 0, 17, 99, 1, 0, 0, 0, 19, 113, 1, 0,
		0, 0, 21, 124, 1, 0, 0, 0, 23, 134, 1, 0, 0, 0, 25, 143, 1, 0, 0, 0, 27,
		159, 1, 0, 0, 0, 29, 168, 1, 0, 0, 0, 31, 170, 1, 0, 0, 0, 33, 197, 1,
		0, 0, 0, 35, 199, 1, 0, 0, 0, 37, 210, 1, 0, 0, 0, 39, 212, 1, 0, 0, 0,
		41, 226, 1, 0, 0, 0, 43, 44, 5, 64, 0, 0, 44, 45, 5, 100, 0, 0, 45, 46,
		5, 111, 0, 0, 46, 47, 5, 99, 0, 0, 47, 2, 1, 0, 0, 0, 48, 49, 5, 64, 0,
		0, 49, 50, 5, 104, 0, 0, 50, 51, 5, 97, 0, 0, 51, 52, 5, 110, 0, 0, 52,
		53, 5, 100, 0, 0, 53, 54, 5, 108, 0, 0, 54, 55, 5, 101, 0, 0, 55, 56, 5,
		114, 0, 0, 56, 4, 1, 0, 0, 0, 57, 58, 5, 64, 0, 0, 58, 59, 5, 100, 0, 0,
		59, 60, 5, 101, 0, 0, 60, 61, 5, 115, 0, 0, 61, 62, 5, 99, 0, 0, 62, 6,
		1, 0, 0, 0, 63, 64, 5, 105, 0, 0, 64, 65, 5, 110, 0, 0, 65, 66, 5, 116,
		0, 0, 66, 67, 5, 101, 0, 0, 67, 68, 5, 114, 0, 0, 68, 69, 5, 102, 0, 0,
		69, 70, 5, 97, 0, 0, 70, 71, 5, 99, 0, 0, 71, 72, 5, 101, 0, 0, 72, 73,
		5, 123, 0, 0, 73, 74, 5, 125, 0, 0, 74, 8, 1, 0, 0, 0, 75, 76, 5, 64, 0,
		0, 76, 77, 5, 115, 0, 0, 77, 78, 5, 101, 0, 0, 78, 79, 5, 114, 0, 0, 79,
		80, 5, 118, 0, 0, 80, 81, 5, 101, 0, 0, 81, 82, 5, 114, 0, 0, 82, 10, 1,
		0, 0, 0, 83, 84, 5, 64, 0, 0, 84, 85, 5, 116, 0, 0, 85, 86, 5, 121, 0,
		0, 86, 87, 5, 112, 0, 0, 87, 88, 5, 101, 0, 0, 88, 12, 1, 0, 0, 0, 89,
		90, 5, 60, 0, 0, 90, 91, 5, 45, 0, 0, 91, 14, 1, 0, 0, 0, 92, 94, 7, 0,
		0, 0, 93, 92, 1, 0, 0, 0, 94, 95, 1, 0, 0, 0, 95, 93, 1, 0, 0, 0, 95, 96,
		1, 0, 0, 0, 96, 97, 1, 0, 0, 0, 97, 98, 6, 7, 0, 0, 98, 16, 1, 0, 0, 0,
		99, 100, 5, 47, 0, 0, 100, 101, 5, 42, 0, 0, 101, 105, 1, 0, 0, 0, 102,
		104, 9, 0, 0, 0, 103, 102, 1, 0, 0, 0, 104, 107, 1, 0, 0, 0, 105, 106,
		1, 0, 0, 0, 105, 103, 1, 0, 0, 0, 106, 108, 1, 0, 0, 0, 107, 105, 1, 0,
		0, 0, 108, 109, 5, 42, 0, 0, 109, 110, 5, 47, 0, 0, 110, 111, 1, 0, 0,
		0, 111, 112, 6, 8, 1, 0, 112, 18, 1, 0, 0, 0, 113, 114, 5, 47, 0, 0, 114,
		115, 5, 47, 0, 0, 115, 119, 1, 0, 0, 0, 116, 118, 8, 1, 0, 0, 117, 116,
		1, 0, 0, 0, 118, 121, 1, 0, 0, 0, 119, 117, 1, 0, 0, 0, 119, 120, 1, 0,
		0, 0, 120, 122, 1, 0, 0, 0, 121, 119, 1, 0, 0, 0, 122, 123, 6, 9, 1, 0,
		123, 20, 1, 0, 0, 0, 124, 129, 5, 34, 0, 0, 125, 128, 8, 2, 0, 0, 126,
		128, 3, 33, 16, 0, 127, 125, 1, 0, 0, 0, 127, 126, 1, 0, 0, 0, 128, 131,
		1, 0, 0, 0, 129, 127, 1, 0, 0, 0, 129, 130, 1, 0, 0, 0, 130, 132, 1, 0,
		0, 0, 131, 129, 1, 0, 0, 0, 132, 133, 5, 34, 0, 0, 133, 22, 1, 0, 0, 0,
		134, 137, 5, 96, 0, 0, 135, 138, 8, 3, 0, 0, 136, 138, 3, 33, 16, 0, 137,
		135, 1, 0, 0, 0, 137, 136, 1, 0, 0, 0, 138, 139, 1, 0, 0, 0, 139, 137,
		1, 0, 0, 0, 139, 140, 1, 0, 0, 0, 140, 141, 1, 0, 0, 0, 141, 142, 5, 96,
		0, 0, 142, 24, 1, 0, 0, 0, 143, 147, 5, 58, 0, 0, 144, 146, 7, 4, 0, 0,
		145, 144, 1, 0, 0, 0, 146, 149, 1, 0, 0, 0, 147, 145, 1, 0, 0, 0, 147,
		148, 1, 0, 0, 0, 148, 157, 1, 0, 0, 0, 149, 147, 1, 0, 0, 0, 150, 158,
		3, 21, 10, 0, 151, 153, 8, 5, 0, 0, 152, 151, 1, 0, 0, 0, 153, 156, 1,
		0, 0, 0, 154, 152, 1, 0, 0, 0, 154, 155, 1, 0, 0, 0, 155, 158, 1, 0, 0,
		0, 156, 154, 1, 0, 0, 0, 157, 150, 1, 0, 0, 0, 157, 154, 1, 0, 0, 0, 158,
		26, 1, 0, 0, 0, 159, 163, 3, 41, 20, 0, 160, 162, 3, 29, 14, 0, 161, 160,
		1, 0, 0, 0, 162, 165, 1, 0, 0, 0, 163, 161, 1, 0, 0, 0, 163, 164, 1, 0,
		0, 0, 164, 28, 1, 0, 0, 0, 165, 163, 1, 0, 0, 0, 166, 169, 3, 41, 20, 0,
		167, 169, 7, 6, 0, 0, 168, 166, 1, 0, 0, 0, 168, 167, 1, 0, 0, 0, 169,
		30, 1, 0, 0, 0, 170, 172, 7, 7, 0, 0, 171, 173, 7, 8, 0, 0, 172, 171, 1,
		0, 0, 0, 172, 173, 1, 0, 0, 0, 173, 174, 1, 0, 0, 0, 174, 175, 3, 39, 19,
		0, 175, 32, 1, 0, 0, 0, 176, 177, 5, 92, 0, 0, 177, 198, 7, 9, 0, 0, 178,
		183, 5, 92, 0, 0, 179, 181, 7, 10, 0, 0, 180, 179, 1, 0, 0, 0, 180, 181,
		1, 0, 0, 0, 181, 182, 1, 0, 0, 0, 182, 184, 7, 11, 0, 0, 183, 180, 1, 0,
		0, 0, 183, 184, 1, 0, 0, 0, 184, 185, 1, 0, 0, 0, 185, 198, 7, 11, 0, 0,
		186, 188, 5, 92, 0, 0, 187, 189, 5, 117, 0, 0, 188, 187, 1, 0, 0, 0, 189,
		190, 1, 0, 0, 0, 190, 188, 1, 0, 0, 0, 190, 191, 1, 0, 0, 0, 191, 192,
		1, 0, 0, 0, 192, 193, 3, 37, 18, 0, 193, 194, 3, 37, 18, 0, 194, 195, 3,
		37, 18, 0, 195, 196, 3, 37, 18, 0, 196, 198, 1, 0, 0, 0, 197, 176, 1, 0,
		0, 0, 197, 178, 1, 0, 0, 0, 197, 186, 1, 0, 0, 0, 198, 34, 1, 0, 0, 0,
		199, 208, 3, 37, 18, 0, 200, 203, 3, 37, 18, 0, 201, 203, 5, 95, 0, 0,
		202, 200, 1, 0, 0, 0, 202, 201, 1, 0, 0, 0, 203, 206, 1, 0, 0, 0, 204,
		202, 1, 0, 0, 0, 204, 205, 1, 0, 0, 0, 205, 207, 1, 0, 0, 0, 206, 204,
		1, 0, 0, 0, 207, 209, 3, 37, 18, 0, 208, 204, 1, 0, 0, 0, 208, 209, 1,
		0, 0, 0, 209, 36, 1, 0, 0, 0, 210, 211, 7, 12, 0, 0, 211, 38, 1, 0, 0,
		0, 212, 220, 7, 6, 0, 0, 213, 215, 7, 13, 0, 0, 214, 213, 1, 0, 0, 0, 215,
		218, 1, 0, 0, 0, 216, 214, 1, 0, 0, 0, 216, 217, 1, 0, 0, 0, 217, 219,
		1, 0, 0, 0, 218, 216, 1, 0, 0, 0, 219, 221, 7, 6, 0, 0, 220, 216, 1, 0,
		0, 0, 220, 221, 1, 0, 0, 0, 221, 40, 1, 0, 0, 0, 222, 227, 7, 14, 0, 0,
		223, 227, 8, 15, 0, 0, 224, 225, 7, 16, 0, 0, 225, 227, 7, 17, 0, 0, 226,
		222, 1, 0, 0, 0, 226, 223, 1, 0, 0, 0, 226, 224, 1, 0, 0, 0, 227, 42, 1,
		0, 0, 0, 24, 0, 95, 105, 119, 127, 129, 137, 139, 147, 154, 157, 163, 168,
		172, 180, 183, 190, 197, 202, 204, 208, 216, 220, 226, 2, 0, 1, 0, 0, 88,
		0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ApiLexerInit initializes any static state used to implement ApiLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewApiLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func ApiLexerInit() {
	staticData := &apilexerLexerStaticData
	staticData.once.Do(apilexerLexerInit)
}

// NewApiLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewApiLexer(input antlr.CharStream) *ApiLexer {
	ApiLexerInit()
	l := new(ApiLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &apilexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "ApiLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ApiLexer tokens.
const (
	ApiLexerATDOC         = 1
	ApiLexerATHANDLER     = 2
	ApiLexerATDESC        = 3
	ApiLexerINTERFACE     = 4
	ApiLexerATSERVER      = 5
	ApiLexerATTYPE        = 6
	ApiLexerAS            = 7
	ApiLexerWS            = 8
	ApiLexerCOMMENT       = 9
	ApiLexerLINE_COMMENT  = 10
	ApiLexerSTRING        = 11
	ApiLexerRAW_STRING    = 12
	ApiLexerLINE_VALUE    = 13
	ApiLexerID            = 14
	ApiLexerLetterOrDigit = 15
)
