/**
  * 整部分语法规则设计基于Go 1.20与goctl 1.5.2 windows_x64，务必不要将Java的语法规则带入到该文件的语法中，
  * Java代码统一使用UTF-8字符集作为参数传递格式
  */

//固定写入内容
syntax = "v2"

//Java Code生成没有做任何处理
info(
    title: "type title here"
    desc: "type desc here"
    author: "type author here"
    email: "type email here"
    version: "type version here"
)

//服务总名
svname <- "com.sgcc.demo.subdomain"

//子项目名，Front中也被识别成文件创建路径
subsvname <- "demo"

//BO的注释方法1，注意必须使用name
@type (
    name: "测试请求DTO"
)
type RequestDTO struct {
    Id string   `primary` //注意，primary如果没有定义则会按照Type名+字段名夫人形式生成Constant，例如该条例子会生成RESPONSE_ROOT:MESSAGE
    Name string `desc:"姓名", code:"kkkName"` //desc：内容将作为Java代码中swagger中的注释使用，code：内容为标准编码类型用作查询内容的标准编码转换，当然只在VO里起作用
    Number string `desc:"数字", path:""`
}

//BO的注释方法2
@type ("测试响应ROOT")  //这里的"("与")"可有可无，但是他们必须一起出现或一起消失
type ResponseROOT struct {
    Message string `json:"message",code:"kkkName",primary`  
}

@server(
    group: greet/s1 //路由组
    desc: service测试1  //用作swagger中的API注释
)
service Aapi { //目前只支持同一个service名，即这里的Api，可以有多个不同service块使用同一名字，但是不允许出现不同名字

    @handler createBalance
    @desc 接口测试ROOT
    post /createBalance([]ResponseROOT)

    @handler updateBalance
    @desc 接口测试DTO
    post /updateBalance(RequestDTO)
}

